{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({\n  nrows = 3,\n  ncols = 3,\n  chanceLightStartsOn\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    let arr = [];\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        console.log('*');\n        initialBoard.push('1');\n      }\n    }\n    // TODO: create array-of-arrays of true/false values\n    return initialBoard;\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n\n  // TODO\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","arr","i","j","console","log","push","hasWon","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","_c","$RefreshReg$"],"sources":["/Users/kruti/Documents/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows=3, ncols=3, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    let arr=[]\n    for(let i=0;i<4;i++){\n      for(let j=0;j<4;j++){\n       console.log('*')\n       initialBoard.push('1')\n      }\n      \n    }\n    // TODO: create array-of-arrays of true/false values\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n\n  // TODO\n}\n\nexport default Board;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAO,aAAa;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,KAAKA,CAAC;EAAEC,KAAK,GAAC,CAAC;EAAEC,KAAK,GAAC,CAAC;EAAEC;AAAoB,CAAC,EAAE;EAAAC,EAAA;EACxD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAACS,WAAW,CAAC,CAAC,CAAC;;EAEjD;EACA,SAASA,WAAWA,CAAA,EAAG;IACrB,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAIC,GAAG,GAAC,EAAE;IACV,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC,CAAC,EAACA,CAAC,EAAE,EAAC;MAClB,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAAC,CAAC,EAACA,CAAC,EAAE,EAAC;QACnBC,OAAO,CAACC,GAAG,CAAC,GAAG,CAAC;QAChBL,YAAY,CAACM,IAAI,CAAC,GAAG,CAAC;MACvB;IAEF;IACA;IACA,OAAON,YAAY;EACrB;EAEA,SAASO,MAAMA,CAAA,EAAG;IAChB;EAAA;EAGF,SAASC,eAAeA,CAACC,KAAK,EAAE;IAC9BX,QAAQ,CAACY,QAAQ,IAAI;MACnB,MAAM,CAACC,CAAC,EAAEC,CAAC,CAAC,GAAGH,KAAK,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;MAE3C,MAAMC,QAAQ,GAAGA,CAACL,CAAC,EAAEC,CAAC,EAAEK,SAAS,KAAK;QACpC;;QAEA,IAAIL,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGlB,KAAK,IAAIiB,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGlB,KAAK,EAAE;UAC9CwB,SAAS,CAACN,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG,CAACK,SAAS,CAACN,CAAC,CAAC,CAACC,CAAC,CAAC;QACpC;MACF,CAAC;;MAED;;MAEA;;MAEA;IACF,CAAC,CAAC;EACJ;;EAEA;;EAEA;;EAEA;;EAEA;AACF;AAAChB,EAAA,CAjDQJ,KAAK;AAAA0B,EAAA,GAAL1B,KAAK;AAmDd,eAAeA,KAAK;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}